{
  "summary": "Testing git staging preservation",
  "sections": {
    "testing": {
      "summary": "TDD approach with comprehensive test isolation",
      "detail": "Tests in tests/ directory use pytest framework. Each test class inherits from TestCase with temp_dir fixture (line 15-20 in test files). Key test isolation: 1) DevDocStorage(tmpdir) creates isolated storage per test, 2) @patch decorators mock sys.stdout/input (line 25+ in tests), 3) Tests never touch real .devdoc directory. Example: test_add_principle() in tests/test_principles.py:33 uses mock input and verifies storage.save_principles() was called. Run: pytest -v"
    },
    "architecture": {
      "summary": "Modular CLI design with manager pattern",
      "detail": "Entry point: devdoc/cli.py:main() (line 88). Uses argparse.ArgumentParser with subparsers (lines 15-58). Each feature has dedicated manager: PrinciplesManager(devdoc/principles.py), SummaryManager(devdoc/summary.py), SectionsManager(devdoc/sections.py), EmbeddingsManager(devdoc/embeddings.py). All use DevDocStorage(devdoc/storage.py) for persistence. CLI imports managers on-demand (lines 92+) keeping memory footprint low. Storage methods: load_principles(), save_principles(), load_summary(), save_summary(), get_db_connection()."
    },
    "embeddings": {
      "summary": "Vector embeddings with RAG querying using llm package",
      "detail": "EmbeddingsManager(devdoc/embeddings.py) handles all vector operations. Key methods: generate_embedding() calls subprocess.run(['llm', 'embed', '-c', text, '-m', model]) (line 35). chunk_text() splits content with overlap (line 18). store_embedding() saves to SQLite embeddings table (line 75). search_similar_content() computes cosine similarity via compute_similarity() (line 94). Database schema: embeddings(content_type, content_id, chunk_text, embedding BLOB). Use: devdoc embed (generates all), devdoc query 'text' (searches). Config: .devdoc/config.json embedding_model key."
    },
    "git": {
      "summary": "Automatic git version control for devdoc changes",
      "detail": "Every devdoc content change should automatically commit to git with descriptive messages. Preserve user's staging area by unstaging, staging only devdoc files, committing, then restaging user files. Use git status, add, and commit commands in devdoc/storage.py after save operations."
    },
    "packaging": {
      "summary": "PyPI package configuration and publishing",
      "detail": "Package built with python -m build creating wheel (.whl) and source distribution (.tar.gz) in dist/. Uses setup.py and pyproject.toml for metadata. Entry point: devdoc=devdoc.cli:main in setup.py:44. Version defined in devdoc/__init__.py:5 (__version__ = '0.1.0'). Install deps: llm>=0.13.0, llm-gemini, sqlite-utils>=3.0.0, python-dotenv>=1.0.0, numpy>=1.20.0. Build tools: pip install build twine. Check: twine check dist/*. Publish: twine upload dist/* (requires PyPI account)."
    }
  }
}